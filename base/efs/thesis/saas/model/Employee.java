package efs.thesis.saas.model;

// Generated Mar 13, 2013 12:38:40 PM by Hibernate Tools 3.2.1.GA

import static javax.persistence.GenerationType.IDENTITY;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import efs.thesis.common.annotation.AutoCrud;
import efs.thesis.common.annotation.FormElement;
import efs.thesis.common.annotation.validator.NotEmpty;
import efs.thesis.common.db.model.PlainModel;
import efs.thesis.common.enumtype.FormType;

/**
 * Employee generated by hbm2java
 */

@AutoCrud
@Entity
@Table(name = "EMPLOYEE")
public class Employee extends PlainModel implements java.io.Serializable {

	@FormElement(type = FormType.LABEL, filterable = true, allowInput = false)
	private Integer id;
	
	@FormElement(type = FormType.POPUP)
	private Nationality nationality;
	
	@FormElement(type = FormType.POPUP)
	private Role role;
	
	@FormElement(type = FormType.POPUP, listed = true, alias = "supervisor", filterable = true)
	private Employee employee;
	
	@FormElement(type = FormType.POPUP)
	private ReportingMethod reportingMethod;
	
//	@NotEmpty
//	@FormElement(type = FormType.POPUP, listed = true, alias = "Job & Employment Status", filterable = true)
//	private Job job;
	
	@FormElement(type = FormType.POPUP)
	private MaritalStatus maritalStatus;
	
	@NotEmpty
	@FormElement(type = FormType.TEXT, listed = true, filterable = true)
	private String firstName;
	
	@FormElement(type = FormType.TEXT, listed = true, filterable = true)
	private String middleName;
	
	@FormElement(type = FormType.TEXT, listed = true, filterable = true)
	private String lastName;
	
	@FormElement(type = FormType.TEXT)
	private String employeeId;
	
	@FormElement(type = FormType.TEXT)
	private String username;
	
	private String password;
	
	@FormElement(type = FormType.TEXT)
	private String otherId;
	
	@FormElement(type = FormType.TEXT, alias = "license Number")
	private String driverLicenseNumber;
	
	@FormElement(type = FormType.DATE)
	private Date licenseExpiryDate;
	
	@FormElement(type = FormType.TEXT)
	private Boolean gender;
	
	@FormElement(type = FormType.DATE)
	private Date dateOfBirth;
	private Set<Education> educations = new HashSet<Education>(0);
	private Set<Dependents> dependentses = new HashSet<Dependents>(0);
	private Set<Employee> employees = new HashSet<Employee>(0);
	private Set<EmployeeAccess> employeeAccesses = new HashSet<EmployeeAccess>(0);
	private Set<Languages> languageses = new HashSet<Languages>(0);
	private Set<EmployeeLeaves> employeeLeaveses = new HashSet<EmployeeLeaves>(0);
	private Set<Skills> skillses = new HashSet<Skills>(0);
	private Set<WorkExperience> workExperiences = new HashSet<WorkExperience>(0);
	private Set<Subscription> subscriptions = new HashSet<Subscription>(0);
	private Set<Salary> salaries = new HashSet<Salary>(0);
	private Set<License> licenses = new HashSet<License>(0);
	private Set<ContactDetails> contactDetailses = new HashSet<ContactDetails>(0);
	private Set<Immgration> immgrations = new HashSet<Immgration>(0);
	private Set<Job> jobs = new HashSet<Job>(0);

	public Employee() {
	}

	public Employee(Nationality nationality, Role role, Employee employee,
			ReportingMethod reportingMethod,
			MaritalStatus maritalStatus) {
		this.nationality = nationality;
		this.role = role;
		this.employee = employee;
		this.reportingMethod = reportingMethod;
		this.maritalStatus = maritalStatus;
	}

	public Employee(Nationality nationality, Role role, Employee employee,
			ReportingMethod reportingMethod,
			MaritalStatus maritalStatus, String firstName, String middleName,
			String lastName, String employeeId, String username,
			String password, String otherId, String driverLicenseNumber,
			Date licenseExpiryDate, Boolean gender, Date dateOfBirth,
			Set<Education> educations, Set<Dependents> dependentses,
			Set<Employee> employees, Set<EmployeeAccess> employeeAccesses,
			Set<Languages> languageses, Set<EmployeeLeaves> employeeLeaveses,
			Set<Skills> skillses, Set<WorkExperience> workExperiences,
			Set<Subscription> subscriptions, Set<Salary> salaries,
			Set<License> licenses, Set<ContactDetails> contactDetailses) {
		this.nationality = nationality;
		this.role = role;
		this.employee = employee;
		this.reportingMethod = reportingMethod;
		this.maritalStatus = maritalStatus;
		this.firstName = firstName;
		this.middleName = middleName;
		this.lastName = lastName;
		this.employeeId = employeeId;
		this.username = username;
		this.password = password;
		this.otherId = otherId;
		this.driverLicenseNumber = driverLicenseNumber;
		this.licenseExpiryDate = licenseExpiryDate;
		this.gender = gender;
		this.dateOfBirth = dateOfBirth;
		this.educations = educations;
		this.dependentses = dependentses;
		this.employees = employees;
		this.employeeAccesses = employeeAccesses;
		this.languageses = languageses;
		this.employeeLeaveses = employeeLeaveses;
		this.skillses = skillses;
		this.workExperiences = workExperiences;
		this.subscriptions = subscriptions;
		this.salaries = salaries;
		this.licenses = licenses;
		this.contactDetailses = contactDetailses;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "ID", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "NATIONALITY_ID")
	public Nationality getNationality() {
		return this.nationality;
	}

	public void setNationality(Nationality nationality) {
		this.nationality = nationality;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "ROLE_ID")
	public Role getRole() {
		return this.role;
	}

	public void setRole(Role role) {
		this.role = role;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "SUPERVISOR_ID")
	public Employee getEmployee() {
		return this.employee;
	}

	public void setEmployee(Employee employee) {
		this.employee = employee;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "REPORTING_METHOD_ID")
	public ReportingMethod getReportingMethod() {
		return this.reportingMethod;
	}

	public void setReportingMethod(ReportingMethod reportingMethod) {
		this.reportingMethod = reportingMethod;
	}

//	@ManyToOne(fetch = FetchType.LAZY)
//	@JoinColumn(name = "JOB_ID")
//	public Job getJob() {
//		return this.job;
//	}
//
//	public void setJob(Job job) {
//		this.job = job;
//	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "MARITAL_STATUS_ID")
	public MaritalStatus getMaritalStatus() {
		return this.maritalStatus;
	}

	public void setMaritalStatus(MaritalStatus maritalStatus) {
		this.maritalStatus = maritalStatus;
	}

	@Column(name = "FIRST_NAME", length = 45)
	public String getFirstName() {
		return this.firstName == null ? "" : this.firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	@Column(name = "MIDDLE_NAME", length = 45)
	public String getMiddleName() {
		return this.middleName == null ? "" : this.middleName;
	}

	public void setMiddleName(String middleName) {
		this.middleName = middleName == null ? "" : this.middleName;
	}

	@Column(name = "LAST_NAME", length = 45)
	public String getLastName() {
		return this.lastName == null ? "" : this.lastName;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	@Column(name = "EMPLOYEE_ID", length = 45)
	public String getEmployeeId() {
		return this.employeeId;
	}

	public void setEmployeeId(String employeeId) {
		this.employeeId = employeeId;
	}

	@Column(name = "USERNAME", length = 45)
	public String getUsername() {
		return this.username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	@Column(name = "PASSWORD")
	public String getPassword() {
		return this.password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	@Column(name = "OTHER_ID", length = 45)
	public String getOtherId() {
		return this.otherId;
	}

	public void setOtherId(String otherId) {
		this.otherId = otherId;
	}

	@Column(name = "DRIVER_LICENSE_NUMBER", length = 45)
	public String getDriverLicenseNumber() {
		return this.driverLicenseNumber;
	}

	public void setDriverLicenseNumber(String driverLicenseNumber) {
		this.driverLicenseNumber = driverLicenseNumber;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "LICENSE_EXPIRY_DATE", length = 19)
	public Date getLicenseExpiryDate() {
		return this.licenseExpiryDate;
	}

	public void setLicenseExpiryDate(Date licenseExpiryDate) {
		this.licenseExpiryDate = licenseExpiryDate;
	}

	@Column(name = "GENDER")
	public Boolean getGender() {
		return this.gender;
	}

	public void setGender(Boolean gender) {
		this.gender = gender;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "DATE_OF_BIRTH", length = 10)
	public Date getDateOfBirth() {
		return this.dateOfBirth;
	}

	public void setDateOfBirth(Date dateOfBirth) {
		this.dateOfBirth = dateOfBirth;
	}

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "employee")
	public Set<Education> getEducations() {
		return this.educations;
	}

	public void setEducations(Set<Education> educations) {
		this.educations = educations;
	}

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "employee")
	public Set<Immgration> getImmgration() {
		return this.immgrations;
	}

	public void setImmgration(Set<Immgration> immgrations) {
		this.immgrations = immgrations;
	}
	
	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "employee")
	public Set<Job> getJobs() {
		return this.jobs;
	}

	public void setJobs(Set<Job> jobs) {
		this.jobs = jobs;
	}
	
	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "employee")
	public Set<Dependents> getDependentses() {
		return this.dependentses;
	}

	public void setDependentses(Set<Dependents> dependentses) {
		this.dependentses = dependentses;
	}

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "employee")
	public Set<Employee> getEmployees() {
		return this.employees;
	}

	public void setEmployees(Set<Employee> employees) {
		this.employees = employees;
	}

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "employee")
	public Set<EmployeeAccess> getEmployeeAccesses() {
		return this.employeeAccesses;
	}

	public void setEmployeeAccesses(Set<EmployeeAccess> employeeAccesses) {
		this.employeeAccesses = employeeAccesses;
	}

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "employee")
	public Set<Languages> getLanguageses() {
		return this.languageses;
	}

	public void setLanguageses(Set<Languages> languageses) {
		this.languageses = languageses;
	}

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "employee")
	public Set<EmployeeLeaves> getEmployeeLeaveses() {
		return this.employeeLeaveses;
	}

	public void setEmployeeLeaveses(Set<EmployeeLeaves> employeeLeaveses) {
		this.employeeLeaveses = employeeLeaveses;
	}

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "employee")
	public Set<Skills> getSkillses() {
		return this.skillses;
	}

	public void setSkillses(Set<Skills> skillses) {
		this.skillses = skillses;
	}

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "employee")
	public Set<WorkExperience> getWorkExperiences() {
		return this.workExperiences;
	}

	public void setWorkExperiences(Set<WorkExperience> workExperiences) {
		this.workExperiences = workExperiences;
	}

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "employee")
	public Set<Subscription> getSubscriptions() {
		return this.subscriptions;
	}

	public void setSubscriptions(Set<Subscription> subscriptions) {
		this.subscriptions = subscriptions;
	}

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "employee")
	public Set<Salary> getSalaries() {
		return this.salaries;
	}

	public void setSalaries(Set<Salary> salaries) {
		this.salaries = salaries;
	}

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "employee")
	public Set<License> getLicenses() {
		return this.licenses;
	}

	public void setLicenses(Set<License> licenses) {
		this.licenses = licenses;
	}

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "employee")
	public Set<ContactDetails> getContactDetailses() {
		return this.contactDetailses;
	}

	public void setContactDetailses(Set<ContactDetails> contactDetailses) {
		this.contactDetailses = contactDetailses;
	}

	@Override
	public String toString() {
		return new StringBuffer(getFirstName()).append(" ").append(getMiddleName()).append(" ").append(getLastName()).toString();
	}

}
