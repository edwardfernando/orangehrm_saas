package efs.thesis.saas.model;

// Generated Mar 13, 2013 12:38:40 PM by Hibernate Tools 3.2.1.GA

import static javax.persistence.GenerationType.IDENTITY;

import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import efs.thesis.common.annotation.AutoCrud;
import efs.thesis.common.annotation.FormElement;
import efs.thesis.common.db.model.PlainModel;
import efs.thesis.common.enumtype.FormType;

/**
 * Fields generated by hbm2java
 */
@AutoCrud
@Entity
@Table(name = "FIELDS")
@NamedQueries(value={
	@NamedQuery(name = "findFieldsByNameAndModule", query = "select f from Fields f where f.name = ? and f.accessibleModule.name = ?"),
	@NamedQuery(name = "findAdditionalFieldsByModule", query = "select f from Fields f where f.accessibleModule.name = ? and f.isAdditional = true")
})
public class Fields extends PlainModel implements java.io.Serializable {

	private Integer id;
	
	@FormElement(type = FormType.TEXT, listed = true, filterable = true)
	private String name;
	
	@FormElement(type = FormType.POPUP, listed = true, alias = "type")
	private FieldsType fieldsType;
	
	@FormElement(type = FormType.POPUP, listed = true, alias = "module")
	private AccessibleModule accessibleModule;
	
//	@FormElement(type = FormType.CHECKBOX, listed = true)
	private Boolean isActive;
	
	@FormElement(type = FormType.CHECKBOX, listed = true)
	private Boolean isVisible;
	
//	@FormElement(type = FormType.CHECKBOX, listed = true)
	private Boolean isDeletable;
	
	@FormElement(type = FormType.CHECKBOX, listed = true)
	private Boolean isAdditional = false;
	
	@FormElement(type = FormType.TEXT, listed = true)
	private Integer coorX;
	
	@FormElement(type = FormType.TEXT, listed = true)
	private Integer coorY;
	
	private Set<FieldsJsScript> fieldsJsScripts = new HashSet<FieldsJsScript>(0);
	private Set<CssPropertiesFields> cssPropertiesFieldses = new HashSet<CssPropertiesFields>(0);
	private Set<FieldsValue> fieldsValues = new HashSet<FieldsValue>(0);
	private Set<FieldsAttributes> fieldsAttributeses = new HashSet<FieldsAttributes>(0);

	public Fields() {
	}

	public Fields(FieldsType fieldsType, AccessibleModule accessibleModule) {
		this.fieldsType = fieldsType;
		this.accessibleModule = accessibleModule;
	}

	public Fields(FieldsType fieldsType, AccessibleModule accessibleModule,
			Boolean isActive, Boolean isVisible, Boolean isDeletable, Integer coorX,
			Integer coorY, Set<FieldsJsScript> fieldsJsScripts,
			Set<CssPropertiesFields> cssPropertiesFieldses,
			Set<FieldsValue> fieldsValues,
			Set<FieldsAttributes> fieldsAttributeses) {
		this.fieldsType = fieldsType;
		this.accessibleModule = accessibleModule;
		this.isActive = isActive;
		this.isVisible = isVisible;
		this.isDeletable = isDeletable;
		this.coorX = coorX;
		this.coorY = coorY;
		this.fieldsJsScripts = fieldsJsScripts;
		this.cssPropertiesFieldses = cssPropertiesFieldses;
		this.fieldsValues = fieldsValues;
		this.fieldsAttributeses = fieldsAttributeses;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "ID", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}
	
	@Column(name = "NAME")
	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@ManyToOne
	@JoinColumn(name = "FIELDS_TYPE_ID")
	public FieldsType getFieldsType() {
		return this.fieldsType;
	}

	public void setFieldsType(FieldsType fieldsType) {
		this.fieldsType = fieldsType;
	}

	@ManyToOne
	@JoinColumn(name = "ACCSSIBLE_MODULE_ID")
	public AccessibleModule getAccessibleModule() {
		return this.accessibleModule;
	}

	public void setAccessibleModule(AccessibleModule accessibleModule) {
		this.accessibleModule = accessibleModule;
	}

	@Column(name = "IS_ACTIVE")
	public Boolean getIsActive() {
		return this.isActive;
	}

	public void setIsActive(Boolean isActive) {
		this.isActive = isActive;
	}

	@Column(name = "IS_VISIBLE")
	public Boolean getIsVisible() {
		return this.isVisible;
	}

	public void setIsVisible(Boolean isVisible) {
		this.isVisible = isVisible;
	}

	@Column(name = "IS_DELETABLE")
	public Boolean getIsDeletable() {
		return this.isDeletable;
	}

	public void setIsDeletable(Boolean isDeletable) {
		this.isDeletable = isDeletable;
	}

	@Column(name = "IS_ADDITIONAL")
	public Boolean getIsAdditional() {
		return isAdditional;
	}

	public void setIsAdditional(Boolean isAdditional) {
		this.isAdditional = isAdditional;
	}

	@Column(name = "COOR_X")
	public Integer getCoorX() {
		return this.coorX;
	}

	public void setCoorX(Integer coorX) {
		this.coorX = coorX;
	}

	@Column(name = "COOR_Y")
	public Integer getCoorY() {
		return this.coorY;
	}

	public void setCoorY(Integer coorY) {
		this.coorY = coorY;
	}

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "fields")
	public Set<FieldsJsScript> getFieldsJsScripts() {
		return this.fieldsJsScripts;
	}

	public void setFieldsJsScripts(Set<FieldsJsScript> fieldsJsScripts) {
		this.fieldsJsScripts = fieldsJsScripts;
	}

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "fields")
	public Set<CssPropertiesFields> getCssPropertiesFieldses() {
		return this.cssPropertiesFieldses;
	}

	public void setCssPropertiesFieldses(
			Set<CssPropertiesFields> cssPropertiesFieldses) {
		this.cssPropertiesFieldses = cssPropertiesFieldses;
	}

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "fields")
	public Set<FieldsValue> getFieldsValues() {
		return this.fieldsValues;
	}

	public void setFieldsValues(Set<FieldsValue> fieldsValues) {
		this.fieldsValues = fieldsValues;
	}

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "fields")
	public Set<FieldsAttributes> getFieldsAttributeses() {
		return this.fieldsAttributeses;
	}

	public void setFieldsAttributeses(Set<FieldsAttributes> fieldsAttributeses) {
		this.fieldsAttributeses = fieldsAttributeses;
	}

	@Override
	public String toString() {
		return getName() + " > " + getAccessibleModule();
	}

}
