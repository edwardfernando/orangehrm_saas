package efs.thesis.saas.model;

// Generated Mar 13, 2013 12:38:40 PM by Hibernate Tools 3.2.1.GA

import static javax.persistence.GenerationType.IDENTITY;

import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import efs.thesis.common.annotation.AutoCrud;
import efs.thesis.common.annotation.FormElement;
import efs.thesis.common.db.model.PlainModel;
import efs.thesis.common.enumtype.FormType;

/**
 * Salary generated by hbm2java
 */

@AutoCrud
@Entity
@Table(name = "SALARY")
public class Salary extends PlainModel implements java.io.Serializable {

	private Integer id;
	
	@FormElement(type = FormType.POPUP, listed = true)
	private PayFrequency payFrequency;
	
	@FormElement(type = FormType.POPUP, listed = true)
	private Employee employee;
	
	@FormElement(type = FormType.POPUP, listed = true)
	private PayGrade payGrade;
	
	@FormElement(type = FormType.POPUP, listed = true)
	private Currency currency;
	
	@FormElement(type = FormType.TEXT, listed = true)
	private String salaryComponent;
	
	@FormElement(type = FormType.TEXT, listed = true)
	private Long amount;
	
	@FormElement(type = FormType.TEXT, listed = true)
	private String note;
	private Set<DirectDeposit> directDeposits = new HashSet<DirectDeposit>(0);

	public Salary() {
	}

	public Salary(PayFrequency payFrequency, Employee employee,
			PayGrade payGrade, Currency currency) {
		this.payFrequency = payFrequency;
		this.employee = employee;
		this.payGrade = payGrade;
		this.currency = currency;
	}

	public Salary(PayFrequency payFrequency, Employee employee,
			PayGrade payGrade, Currency currency, String salaryComponent,
			Long amount, String note, Set<DirectDeposit> directDeposits) {
		this.payFrequency = payFrequency;
		this.employee = employee;
		this.payGrade = payGrade;
		this.currency = currency;
		this.salaryComponent = salaryComponent;
		this.amount = amount;
		this.note = note;
		this.directDeposits = directDeposits;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "ID", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "PAY_FREQUENCY_ID")
	public PayFrequency getPayFrequency() {
		return this.payFrequency;
	}

	public void setPayFrequency(PayFrequency payFrequency) {
		this.payFrequency = payFrequency;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "EMPLOYEE_ID")
	public Employee getEmployee() {
		return this.employee;
	}

	public void setEmployee(Employee employee) {
		this.employee = employee;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "PAY_GRADE_ID")
	public PayGrade getPayGrade() {
		return this.payGrade;
	}

	public void setPayGrade(PayGrade payGrade) {
		this.payGrade = payGrade;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "CURRENCY_ID")
	public Currency getCurrency() {
		return this.currency;
	}

	public void setCurrency(Currency currency) {
		this.currency = currency;
	}

	@Column(name = "SALARY_COMPONENT", length = 45)
	public String getSalaryComponent() {
		return this.salaryComponent;
	}

	public void setSalaryComponent(String salaryComponent) {
		this.salaryComponent = salaryComponent;
	}

	@Column(name = "AMOUNT", precision = 10, scale = 0)
	public Long getAmount() {
		return this.amount;
	}

	public void setAmount(Long amount) {
		this.amount = amount;
	}

	@Column(name = "NOTE", length = 65535)
	public String getNote() {
		return this.note;
	}

	public void setNote(String note) {
		this.note = note;
	}

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "salary")
	public Set<DirectDeposit> getDirectDeposits() {
		return this.directDeposits;
	}

	public void setDirectDeposits(Set<DirectDeposit> directDeposits) {
		this.directDeposits = directDeposits;
	}

	@Override
	public String toString() {
		return getAmount().toString();
	}

}
